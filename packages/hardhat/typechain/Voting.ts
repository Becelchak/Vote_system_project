/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VotingInterface extends utils.Interface {
  functions: {
    "createVote(string,uint256)": FunctionFragment;
    "endVote(uint256)": FunctionFragment;
    "getVoteResult(uint256)": FunctionFragment;
    "greeting()": FunctionFragment;
    "owner()": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "voteCount()": FunctionFragment;
    "votes(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createVote"
      | "endVote"
      | "getVoteResult"
      | "greeting"
      | "owner"
      | "vote"
      | "voteCount"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "greeting", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "voteCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "createVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greeting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "VoteCreated(uint256,string,uint256)": EventFragment;
    "Voted(uint256,address,bool)": EventFragment;
    "VotingEnded(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoteCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingEnded"): EventFragment;
}

export interface VoteCreatedEventObject {
  voteId: BigNumber;
  question: string;
  endTime: BigNumber;
}
export type VoteCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  VoteCreatedEventObject
>;

export type VoteCreatedEventFilter = TypedEventFilter<VoteCreatedEvent>;

export interface VotedEventObject {
  voteId: BigNumber;
  voter: string;
  voteYes: boolean;
}
export type VotedEvent = TypedEvent<
  [BigNumber, string, boolean],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface VotingEndedEventObject {
  voteId: BigNumber;
  yesVotes: BigNumber;
  noVotes: BigNumber;
}
export type VotingEndedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  VotingEndedEventObject
>;

export type VotingEndedEventFilter = TypedEventFilter<VotingEndedEvent>;

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVote(
      _question: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVoteResult(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        question: string;
        yesVotes: BigNumber;
        noVotes: BigNumber;
      }
    >;

    greeting(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    vote(
      _voteId: BigNumberish,
      _voteYes: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        question: string;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        endTime: BigNumber;
        isEnded: boolean;
      }
    >;
  };

  createVote(
    _question: string,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endVote(
    _voteId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVoteResult(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      question: string;
      yesVotes: BigNumber;
      noVotes: BigNumber;
    }
  >;

  greeting(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  vote(
    _voteId: BigNumberish,
    _voteYes: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voteCount(overrides?: CallOverrides): Promise<BigNumber>;

  votes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean] & {
      question: string;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      endTime: BigNumber;
      isEnded: boolean;
    }
  >;

  callStatic: {
    createVote(
      _question: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endVote(_voteId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getVoteResult(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        question: string;
        yesVotes: BigNumber;
        noVotes: BigNumber;
      }
    >;

    greeting(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    vote(
      _voteId: BigNumberish,
      _voteYes: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    voteCount(overrides?: CallOverrides): Promise<BigNumber>;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        question: string;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        endTime: BigNumber;
        isEnded: boolean;
      }
    >;
  };

  filters: {
    "VoteCreated(uint256,string,uint256)"(
      voteId?: BigNumberish | null,
      question?: null,
      endTime?: null
    ): VoteCreatedEventFilter;
    VoteCreated(
      voteId?: BigNumberish | null,
      question?: null,
      endTime?: null
    ): VoteCreatedEventFilter;

    "Voted(uint256,address,bool)"(
      voteId?: BigNumberish | null,
      voter?: string | null,
      voteYes?: null
    ): VotedEventFilter;
    Voted(
      voteId?: BigNumberish | null,
      voter?: string | null,
      voteYes?: null
    ): VotedEventFilter;

    "VotingEnded(uint256,uint256,uint256)"(
      voteId?: BigNumberish | null,
      yesVotes?: null,
      noVotes?: null
    ): VotingEndedEventFilter;
    VotingEnded(
      voteId?: BigNumberish | null,
      yesVotes?: null,
      noVotes?: null
    ): VotingEndedEventFilter;
  };

  estimateGas: {
    createVote(
      _question: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getVoteResult(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    greeting(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _voteId: BigNumberish,
      _voteYes: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voteCount(overrides?: CallOverrides): Promise<BigNumber>;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createVote(
      _question: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVoteResult(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greeting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _voteId: BigNumberish,
      _voteYes: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voteCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
